> restart;
> ec1:=0=1-x^2;
> 

                                          2
                          ec1 := 0 = 1 - x

> 
> solve(ec1,x);

                                1, -1

> restart;
> ec1:=diff(x(t),t)=1-x(t)^2;
> 

                             d                 2
                      ec1 := -- x(t) = 1 - x(t)
                             dt

> condin:=x(0)=eta;

                         condin := x(0) = eta

> sol:=dsolve({ec1,condin},x(t));

                                              1 + eta
              sol := x(t) = tanh(t + 1/2 ln(- --------))
                                              -1 + eta

> phi:=unapply(rhs(sol),t,eta);
> 
> 
> 

                                                eta + 1
           phi := (t, eta) -> tanh(t + 1/2 ln(- --------))
                                                -1 + eta

> phi(t,eta);

                                       1 + eta
                     tanh(t + 1/2 ln(- --------))
                                       -1 + eta

> phi(t,-1);
Error, (in ln) numeric exception: division by zero

> phi(t,1);
Error, (in phi) numeric exception: division by zero

> restart;
> ec1:=diff(x(t),t)=1-x(t)^2;
> 

                             d                 2
                      ec1 := -- x(t) = 1 - x(t)
                             dt

> condin:=x(0)=1;

                          condin := x(0) = 1

> sol:=dsolve({ec1,condin},x(t));

                           sol := x(t) = 1

> phi:=unapply(rhs(sol),t,eta);
> 
> 
> 

                               phi := 1

> phi(t,eta);

                                  1

> phi(t,-1);

                                  1

> phi(t,1);

                                  1

> plot(phi(t,1));

> restart;
> ec1:=diff(x(t),t)=1-x(t)^2;
> 

                             d                 2
                      ec1 := -- x(t) = 1 - x(t)
                             dt

> condin:=x(0)=eta;

                         condin := x(0) = eta

> sol:=dsolve({ec1,condin},x(t));

                                              1 + eta
              sol := x(t) = tanh(t + 1/2 ln(- --------))
                                              -1 + eta

> phi:=unapply(rhs(sol),t,eta);
> 
> 
> 

                                                eta + 1
           phi := (t, eta) -> tanh(t + 1/2 ln(- --------))
                                                -1 + eta

> phi(t,eta);

                                       1 + eta
                     tanh(t + 1/2 ln(- --------))
                                       -1 + eta

> plot([phi(t,0.4),phi(t,0.9),phi(t,1.1),phi(t,1.2),phi(t,1.3)],t=-0.75..0.75);
> 


> plot([phi(t,-0.5),phi(t,-0.7),phi(t,-1.1),phi(t,-1.2),phi(t,-1.3)],t=-0.75..0.75);
> plot([phi(t,-1.2),phi(t,-1.1),phi(t,-1.3)],t=-2..0);


> plot([phi(t,1.1),phi(t,1.2),phi(t,1.3)],t=-0..2);

> 
> phi(t,0.4);

                        tanh(t + 0.4236489301)

> with(plots);
Warning, the name changecoords has been redefined


  [animate, animate3d, animatecurve, arrow, changecoords, complexplot,

        complexplot3d, conformal, conformal3d, contourplot,

        contourplot3d, coordplot, coordplot3d, cylinderplot,

        densityplot, display, display3d, fieldplot, fieldplot3d,

        gradplot, gradplot3d, graphplot3d, implicitplot,

        implicitplot3d, inequal, interactive, listcontplot,

        listcontplot3d, listdensityplot, listplot, listplot3d,

        loglogplot, logplot, matrixplot, odeplot, pareto, plotcompare,

        pointplot, pointplot3d, polarplot, polygonplot, polygonplot3d,

        polyhedra_supported, polyhedraplot, replot, rootlocus,

        semilogplot, setoptions, setoptions3d, spacecurve,

        sparsematrixplot, sphereplot, surfdata, textplot, textplot3d,

        tubeplot]

> with(DEtools);

  [DEnormal, DEplot, DEplot3d, DEplot_polygon, DFactor, DFactorLCLM,

        DFactorsols, Dchangevar, GCRD, LCLM, MeijerGsols,

        PDEchangecoords, RiemannPsols, Xchange, Xcommutator, Xgauge,

        abelsol, adjoint, autonomous, bernoullisol, buildsol,

        buildsym, canoni, caseplot, casesplit, checkrank, chinisol,

        clairautsol, constcoeffsols, convertAlg, convertsys,

        dalembertsol, dcoeffs, de2diffop, dfieldplot, diffop2de,

        dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv,

        eta_k, eulersols, exactsol, expsols, exterior_power, firint,

        firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys,

        hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen,

        initialdata, integrate_sols, intfactor, invariants,

        kovacicsols, leftdivision, liesol, line_int, linearsol,

        matrixDE, matrix_riccati, maxdimsystems, moser_reduce,

        muchange, mult, mutest, newton_polygon, normalG2, odeadvisor,

        odepde, parametricsol, phaseportrait, poincare, polysols,

        power_equivalent, ratsols, redode, reduceOrder, reduce_order,

        regular_parts, regularsp, remove_RootOf, riccati_system,

        riccatisol, rifread, rifsimp, rightdivision, rtaylor,

        separablesol, solve_group, super_reduce, symgen,

        symmetric_power, symmetric_product, symtest, transinv,

        translate, untranslate, varparam, zoom]

> DEplot(ec1,x(t),t=-2..2,x=-2..2,[[x(0)=0.2],[x(0)=0.7]]);

> restart;
> ec1:=diff(x(t),t)=1-t*x(t)^3;
> 

                            d                   3
                     ec1 := -- x(t) = 1 - t x(t)
                            dt

> infolevel[dsolve]:=3;

                        infolevel[dsolve] := 3

> dsolve(ec1,x(t));
Methods for first order ODEs:
--- Trying classification methods ---
trying a quadrature
trying 1st order linear
trying Bernoulli
trying separable
trying inverse linear
trying homogeneous types:
trying Chini
differential order: 1; looking for linear symmetries
trying exact
trying Abel
--- Trying Lie symmetry methods, 1st order ---
   -> Computing symmetries using: way = 3
   -> Computing symmetries using: way = 4
   -> Computing symmetries using: way = 2
trying symmetry patterns for 1st order ODEs
-> trying a symmetry pattern of the form [F(x)*G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)*G(y)]
trying symmetry patterns of the forms [F(x),G(y)] and [G(y),F(x)]
-> trying a symmetry pattern of the form [F(x),G(x)]
-> trying a symmetry pattern of the form [F(y),G(y)]
-> trying a symmetry pattern of the form [F(x)+G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)+G(y)]
-> trying a symmetry pattern of the form [F(x),G(x)*y+H(x)]
> condin:=x(0)=0;

                          condin := x(0) = 0

> dsolve({ec1,condin},x(t));
Methods for first order ODEs:
--- Trying classification methods ---
trying a quadrature
trying 1st order linear
trying Bernoulli
trying separable
trying inverse linear
trying homogeneous types:
trying Chini
differential order: 1; looking for linear symmetries
trying exact
trying Abel
--- Trying Lie symmetry methods, 1st order ---
   -> Computing symmetries using: way = 3
   -> Computing symmetries using: way = 4
   -> Computing symmetries using: way = 2
trying symmetry patterns for 1st order ODEs
-> trying a symmetry pattern of the form [F(x)*G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)*G(y)]
trying symmetry patterns of the forms [F(x),G(y)] and [G(y),F(x)]
-> trying a symmetry pattern of the form [F(x),G(x)]
-> trying a symmetry pattern of the form [F(y),G(y)]
-> trying a symmetry pattern of the form [F(x)+G(y), 0]
-> trying a symmetry pattern of the form [0, F(x)+G(y)]
-> trying a symmetry pattern of the form [F(x),G(x)*y+H(x)]
> with(plots);
Warning, the name changecoords has been redefined


  [animate, animate3d, animatecurve, arrow, changecoords, complexplot,

        complexplot3d, conformal, conformal3d, contourplot,

        contourplot3d, coordplot, coordplot3d, cylinderplot,

        densityplot, display, display3d, fieldplot, fieldplot3d,

        gradplot, gradplot3d, graphplot3d, implicitplot,

        implicitplot3d, inequal, interactive, listcontplot,

        listcontplot3d, listdensityplot, listplot, listplot3d,

        loglogplot, logplot, matrixplot, odeplot, pareto, plotcompare,

        pointplot, pointplot3d, polarplot, polygonplot, polygonplot3d,

        polyhedra_supported, polyhedraplot, replot, rootlocus,

        semilogplot, setoptions, setoptions3d, spacecurve,

        sparsematrixplot, sphereplot, surfdata, textplot, textplot3d,

        tubeplot]

> with(DEtools);

  [DEnormal, DEplot, DEplot3d, DEplot_polygon, DFactor, DFactorLCLM,

        DFactorsols, Dchangevar, GCRD, LCLM, MeijerGsols,

        PDEchangecoords, RiemannPsols, Xchange, Xcommutator, Xgauge,

        abelsol, adjoint, autonomous, bernoullisol, buildsol,

        buildsym, canoni, caseplot, casesplit, checkrank, chinisol,

        clairautsol, constcoeffsols, convertAlg, convertsys,

        dalembertsol, dcoeffs, de2diffop, dfieldplot, diffop2de,

        dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv,

        eta_k, eulersols, exactsol, expsols, exterior_power, firint,

        firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys,

        hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen,

        initialdata, integrate_sols, intfactor, invariants,

        kovacicsols, leftdivision, liesol, line_int, linearsol,

        matrixDE, matrix_riccati, maxdimsystems, moser_reduce,

        muchange, mult, mutest, newton_polygon, normalG2, odeadvisor,

        odepde, parametricsol, phaseportrait, poincare, polysols,

        power_equivalent, ratsols, redode, reduceOrder, reduce_order,

        regular_parts, regularsp, remove_RootOf, riccati_system,

        riccatisol, rifread, rifsimp, rightdivision, rtaylor,

        separablesol, solve_group, super_reduce, symgen,

        symmetric_power, symmetric_product, symtest, transinv,

        translate, untranslate, varparam, zoom]

> dfieldplot(ec1,x(t),t=-5..5,x=-5..5);

> DEplot(ec1,x(t),t=-2..2,x=-2..2,[[x(0)=0]]);
dsolve/numeric:   entering dsolve/numeric
DEtools/convertsys:   converted to first-order system Y'(x) = f(x,Y(x))      namely (with Y' represented by YP)

                                           3
                        [YP[1] = 1 - t Y[1] ]

DEtools/convertsys:   correspondence between Y[i] names and original functions:

                            [Y[1] = x(t)]

dsolve/numeric:   array Y of initial conditions at x0 =   0.   array(1 .. 1,[(1)=0.])
dsolve/numeric:   the procedure F(x,Y,YP) for computing Y'(x) = f(x,Y(x)) is:   proc (N, t, Y, YP) option `[Y[1] = x(t)]`; YP[1] := 1-t*Y[1]^3 end proc

> restart;
> ec1:=diff(y(x),x)=y(x)/x;

                               d         y(x)
                        ec1 := -- y(x) = ----
                               dx         x

> with(plots);
Warning, the name changecoords has been redefined


  [animate, animate3d, animatecurve, arrow, changecoords, complexplot,

        complexplot3d, conformal, conformal3d, contourplot,

        contourplot3d, coordplot, coordplot3d, cylinderplot,

        densityplot, display, display3d, fieldplot, fieldplot3d,

        gradplot, gradplot3d, graphplot3d, implicitplot,

        implicitplot3d, inequal, interactive, listcontplot,

        listcontplot3d, listdensityplot, listplot, listplot3d,

        loglogplot, logplot, matrixplot, odeplot, pareto, plotcompare,

        pointplot, pointplot3d, polarplot, polygonplot, polygonplot3d,

        polyhedra_supported, polyhedraplot, replot, rootlocus,

        semilogplot, setoptions, setoptions3d, spacecurve,

        sparsematrixplot, sphereplot, surfdata, textplot, textplot3d,

        tubeplot]

> with(DEtools);

  [DEnormal, DEplot, DEplot3d, DEplot_polygon, DFactor, DFactorLCLM,

        DFactorsols, Dchangevar, GCRD, LCLM, MeijerGsols,

        PDEchangecoords, RiemannPsols, Xchange, Xcommutator, Xgauge,

        abelsol, adjoint, autonomous, bernoullisol, buildsol,

        buildsym, canoni, caseplot, casesplit, checkrank, chinisol,

        clairautsol, constcoeffsols, convertAlg, convertsys,

        dalembertsol, dcoeffs, de2diffop, dfieldplot, diffop2de,

        dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv,

        eta_k, eulersols, exactsol, expsols, exterior_power, firint,

        firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys,

        hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen,

        initialdata, integrate_sols, intfactor, invariants,

        kovacicsols, leftdivision, liesol, line_int, linearsol,

        matrixDE, matrix_riccati, maxdimsystems, moser_reduce,

        muchange, mult, mutest, newton_polygon, normalG2, odeadvisor,

        odepde, parametricsol, phaseportrait, poincare, polysols,

        power_equivalent, ratsols, redode, reduceOrder, reduce_order,

        regular_parts, regularsp, remove_RootOf, riccati_system,

        riccatisol, rifread, rifsimp, rightdivision, rtaylor,

        separablesol, solve_group, super_reduce, symgen,

        symmetric_power, symmetric_product, symtest, transinv,

        translate, untranslate, varparam, zoom]

> dfieldplot(ec1,y(x),x=-2..2,y=-2..2);

> dsolve(ec1,y(x));

                             y(x) = _C1 x

> ec2:=diff(y(x),x)=-y(x)/x;

                              d           y(x)
                       ec2 := -- y(x) = - ----
                              dx           x

> dfieldplot(ec2,y(x),x=-2..2,y=-2..2);

> dsolve(ec2,y(x));

                                     _C1
                              y(x) = ---
                                      x

> ec3:=diff(y(x),x)=-x/y(x);

                              d            x
                       ec3 := -- y(x) = - ----
                              dx          y(x)

> dsolve(ec3,y(x));

                      2       1/2             2       1/2
            y(x) = (-x  + _C1)   , y(x) = -(-x  + _C1)

> dfieldplot(ec3,y(x),x=-2..2,y=-2..2);

> ec4:=diff(y(x),x)=-2*x/y(x);

                              d           2 x
                       ec4 := -- y(x) = - ----
                              dx          y(x)

> dsolve(ec4,y(x));

                      2       1/2               2       1/2
          y(x) = (-2 x  + _C1)   , y(x) = -(-2 x  + _C1)

> dfieldplot(ec4,y(x),x=-2..2,y=-2..2);

> restart;
> with(plots);
Warning, the name changecoords has been redefined


  [animate, animate3d, animatecurve, arrow, changecoords, complexplot,

        complexplot3d, conformal, conformal3d, contourplot,

        contourplot3d, coordplot, coordplot3d, cylinderplot,

        densityplot, display, display3d, fieldplot, fieldplot3d,

        gradplot, gradplot3d, graphplot3d, implicitplot,

        implicitplot3d, inequal, interactive, listcontplot,

        listcontplot3d, listdensityplot, listplot, listplot3d,

        loglogplot, logplot, matrixplot, odeplot, pareto, plotcompare,

        pointplot, pointplot3d, polarplot, polygonplot, polygonplot3d,

        polyhedra_supported, polyhedraplot, replot, rootlocus,

        semilogplot, setoptions, setoptions3d, spacecurve,

        sparsematrixplot, sphereplot, surfdata, textplot, textplot3d,

        tubeplot]

> with(DEtools);

  [DEnormal, DEplot, DEplot3d, DEplot_polygon, DFactor, DFactorLCLM,

        DFactorsols, Dchangevar, GCRD, LCLM, MeijerGsols,

        PDEchangecoords, RiemannPsols, Xchange, Xcommutator, Xgauge,

        abelsol, adjoint, autonomous, bernoullisol, buildsol,

        buildsym, canoni, caseplot, casesplit, checkrank, chinisol,

        clairautsol, constcoeffsols, convertAlg, convertsys,

        dalembertsol, dcoeffs, de2diffop, dfieldplot, diffop2de,

        dpolyform, dsubs, eigenring, endomorphism_charpoly, equinv,

        eta_k, eulersols, exactsol, expsols, exterior_power, firint,

        firtest, formal_sol, gen_exp, generate_ic, genhomosol, gensys,

        hamilton_eqs, hypergeomsols, hyperode, indicialeq, infgen,

        initialdata, integrate_sols, intfactor, invariants,

        kovacicsols, leftdivision, liesol, line_int, linearsol,

        matrixDE, matrix_riccati, maxdimsystems, moser_reduce,

        muchange, mult, mutest, newton_polygon, normalG2, odeadvisor,

        odepde, parametricsol, phaseportrait, poincare, polysols,

        power_equivalent, ratsols, redode, reduceOrder, reduce_order,

        regular_parts, regularsp, remove_RootOf, riccati_system,

        riccatisol, rifread, rifsimp, rightdivision, rtaylor,

        separablesol, solve_group, super_reduce, symgen,

        symmetric_power, symmetric_product, symtest, transinv,

        translate, untranslate, varparam, zoom]

> contourplot(x*y,x=-2..2,y=-2..2);

> contourplot(x^2+y^2,x=-3..3,y=-3..3);

> contourplot(2*x^2+y^2,x=-2..2,y=-2..2);

> ec1:=diff(x*y(x),x)=0;

                                    /d      \
                    ec1 := y(x) + x |-- y(x)| = 0
                                    \dx     /

> dsolve(ec1,y(x));

                                     _C1
                              y(x) = ---
                                      x

> 
> 
